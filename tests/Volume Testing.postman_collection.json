{
	"info": {
		"_postman_id": "b5206f25-e038-417e-81f8-bebb498a48c0",
		"name": "Volume Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "getAllArticles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"At least two articles are returned\", function () {",
									"    pm.expect(jsonData.data.getAllArticles.length).is.greaterThan(2);",
									"});",
									"",
									"pm.environment.set(\"article_1_id\", jsonData.data.getAllArticles[0].id);",
									"pm.environment.set(\"article_1_pubslug\", jsonData.data.getAllArticles[0].publication.slug);",
									"pm.environment.set(\"article_1_pubid\", jsonData.data.getAllArticles[0].publication.id);",
									"pm.environment.set(\"article_1_shoutouts\", jsonData.data.getAllArticles[0].shoutouts);",
									"",
									"pm.environment.set(\"article_2_id\", jsonData.data.getAllArticles[1].id);",
									"pm.environment.set(\"article_2_pubslug\", jsonData.data.getAllArticles[1].publication.slug);",
									"pm.environment.set(\"article_2_pubid\", jsonData.data.getAllArticles[1].publication.id);",
									"",
									"postman.setNextRequest(\"getAllPublications\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getAllArticles ($limit: Float) {\n    getAllArticles (limit: $limit) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"limit\": {{limit}}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "queries",
			"item": [
				{
					"name": "getAllPublications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"article_3_pubid\", jsonData.data.getAllPublications[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getAllPublications {\n    getAllPublications {\n        backgroundImageURL\n        bio\n        bioShort\n        id\n        mostRecentArticle {\n            articleURL\n            date\n            id\n            imageURL\n            publication {\n                backgroundImageURL\n                bio\n                bioShort\n                id\n                mostRecentArticle {\n                    articleURL\n                    date\n                    id\n                    imageURL\n                    publicationSlug\n                    shoutouts\n                    title\n                    trendiness\n                }\n                name\n                numArticles\n                profileImageURL\n                rssName\n                rssURL\n                shoutouts\n                slug\n                websiteURL\n            }\n            publicationSlug\n            shoutouts\n            title\n            trendiness\n        }\n        name\n        numArticles\n        profileImageURL\n        rssName\n        rssURL\n        shoutouts\n        slug\n        socials {\n            social\n            URL\n        }\n        websiteURL\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticleByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct article is retrieved\", function () {",
									"    let article_1_pubslug = pm.environment.get(\"article_1_pubslug\");",
									"    pm.expect(jsonData.data.getArticleByID.publication.slug).to.equal(article_1_pubslug);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticleByID ($id: String!) {\n    getArticleByID (id: $id) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"id\": \"{{article_1_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticlesAfterDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var since = new Date(pm.globals.get(\"since\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All articles were created after entered date\", function () {",
									"    for(i = 0; i < jsonData.data.getArticlesAfterDate.length; i++) {",
									"        let articleDate = new Date(jsonData.data.getArticlesAfterDate[i].date);",
									"        pm.expect(articleDate.getTime()).to.be.above(since.getTime());",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticlesAfterDate ($limit: Float, $since: String!) {\n    getArticlesAfterDate (limit: $limit, since: $since) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"limit\": {{limit}},\n  \"since\": \"{{since}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticlesByIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticlesByIDs ($ids: [String!]!) {\n    getArticlesByIDs (ids: $ids) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"ids\": [\n    \"{{article_1_id}}\",\n    \"{{article_2_id}}\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticlesByIDs returns valid article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Only article with valid article id is returned\", function () {",
									"    pm.expect(jsonData.data.getArticlesByIDs.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticlesByIDs ($ids: [String!]!) {\n    getArticlesByIDs (ids: $ids) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"ids\": [\n    \"{{article_1_pubid}}\",\n    \"{{article_2_id}}\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticlesByPublicationID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticlesByPublicationID ($publicationID: String!) {\n    getArticlesByPublicationID (publicationID: $publicationID) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"publicationID\": \"{{article_1_pubid}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getArticlesByPublicationIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getArticlesByPublicationIDs ($publicationIDs: [String!]!) {\n    getArticlesByPublicationIDs (publicationIDs: $publicationIDs) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"publicationIDs\": \n  [\"{{article_1_pubid}}\",\n   \"{{article_3_pubid}}\"] \n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPublicationByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getPublicationByID ($id: String!) {\n    getPublicationByID (id: $id) {\n        backgroundImageURL\n        bio\n        bioShort\n        id\n        mostRecentArticle {\n            articleURL\n            date\n            id\n            imageURL\n            publication {\n                backgroundImageURL\n                bio\n                bioShort\n                id\n                mostRecentArticle {\n                    articleURL\n                    date\n                    id\n                    imageURL\n                    publicationSlug\n                    shoutouts\n                    title\n                    trendiness\n                }\n                name\n                numArticles\n                profileImageURL\n                rssName\n                rssURL\n                shoutouts\n                slug\n                websiteURL\n            }\n            publicationSlug\n            shoutouts\n            title\n            trendiness\n        }\n        name\n        numArticles\n        profileImageURL\n        rssName\n        rssURL\n        shoutouts\n        slug\n        socials {\n            social\n            URL\n        }\n        websiteURL\n    }\n}",
								"variables": "{\n  \"id\": \"{{article_1_pubid}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPublicationsByIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getPublicationsByIDs ($ids: [String!]!) {\n    getPublicationsByIDs (ids: $ids) {\n        backgroundImageURL\n        bio\n        bioShort\n        id\n        mostRecentArticle {\n            articleURL\n            date\n            id\n            imageURL\n            publication {\n                backgroundImageURL\n                bio\n                bioShort\n                id\n                mostRecentArticle {\n                    articleURL\n                    date\n                    id\n                    imageURL\n                    publicationSlug\n                    shoutouts\n                    title\n                    trendiness\n                }\n                name\n                numArticles\n                profileImageURL\n                rssName\n                rssURL\n                shoutouts\n                slug\n                websiteURL\n            }\n            publicationSlug\n            shoutouts\n            title\n            trendiness\n        }\n        name\n        numArticles\n        profileImageURL\n        rssName\n        rssURL\n        shoutouts\n        slug\n        socials {\n            social\n            URL\n        }\n        websiteURL\n    }\n}",
								"variables": "{\n  \"ids\": [\n    \"{{article_1_pubid}}\",\n    \"{{article_2_pubid}}\"\n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getTrendingArticles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All articles are trending\", function () {",
									"    for(i = 0; i < jsonData.data.getTrendingArticles.length; i++) {",
									"        let trend = jsonData.data.getTrendingArticles[i].isTrending;",
									"        pm.expect(trend).to.equal(true);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query getTrendingArticles ($limit: Float) {\n    getTrendingArticles (limit: $limit) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"limit\": {{limit}}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "mutations",
			"item": [
				{
					"name": "incrementShoutouts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let shoutouts = pm.environment.get(\"article_1_shoutouts\");",
									"let jsonData = pm.response.json(); ",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of shoutouts on article was incremented\", function () {",
									"    pm.expect(jsonData.data.incrementShoutouts.shoutouts).to.equal(shoutouts + 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation incrementShoutouts ($id: String!) {\n    incrementShoutouts (id: $id) {\n        articleURL\n        date\n        id\n        imageURL\n        publication {\n            backgroundImageURL\n            bio\n            bioShort\n            id\n            mostRecentArticle {\n                articleURL\n                date\n                id\n                imageURL\n                publication {\n                    backgroundImageURL\n                    bio\n                    bioShort\n                    id\n                    name\n                    numArticles\n                    profileImageURL\n                    rssName\n                    rssURL\n                    shoutouts\n                    slug\n                    websiteURL\n                }\n                publicationSlug\n                shoutouts\n                title\n                trendiness\n            }\n            name\n            numArticles\n            profileImageURL\n            rssName\n            rssURL\n            shoutouts\n            slug\n            websiteURL\n        }\n        publicationSlug\n        shoutouts\n        title\n        trendiness\n        nsfw\n        isTrending\n    }\n}",
								"variables": "{\n  \"id\": \"{{article_1_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"pm.globals.set(\"since\", moment().subtract(3, 'months').format('MM-DD-YYYY'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:3000/graphql"
		},
		{
			"key": "limit",
			"value": "25"
		}
	]
}